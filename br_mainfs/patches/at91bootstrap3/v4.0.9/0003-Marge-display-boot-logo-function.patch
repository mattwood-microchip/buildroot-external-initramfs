From aaf33badbe409c303f46490126144a8386004e2c Mon Sep 17 00:00:00 2001
From: user <xing.chen@microchip.com>
Date: Wed, 14 Aug 2024 10:23:25 +0800
Subject: [PATCH 3/5] Marge display boot logo function

---
 Kconfig                         |  84 ++++++
 Makefile                        |  10 +
 device/Config.in                |   2 +-
 device/sam9x60/Config.in.device |   1 +
 device/sam9x60/sam9x60.c        |  48 +++
 device/sam9x60/sam9x60_board.h  |  19 ++
 device/sama5d2/Config.in.device |   1 +
 device/sama5d2/sama5d2.c        |  77 +++++
 device/sama5d2/sama5d2_board.h  |  19 ++
 driver/Config.in.driver         |   8 +
 driver/at91_lcdc.c              | 499 ++++++++++++++++++++++++++++++++
 driver/common.c                 |  19 ++
 driver/driver.mk                |   1 +
 driver/driver_cpp.mk            |   4 +
 driver/nandflash.c              |  17 ++
 driver/sdcard.c                 |  10 +
 driver/spi_flash/spi_flash.c    |  19 ++
 include/arch/at91_lcdc.h        | 255 ++++++++++++++++
 include/board.h                 |   2 +
 include/common.h                |  10 +
 include/lcdc.h                  |  14 +
 main.c                          |   5 +
 toplevel_cpp.mk                 |  20 ++
 23 files changed, 1143 insertions(+), 1 deletion(-)
 create mode 100644 driver/at91_lcdc.c
 create mode 100755 include/arch/at91_lcdc.h
 create mode 100755 include/lcdc.h

diff --git a/Kconfig b/Kconfig
index 35455146..1c0e193c 100644
--- a/Kconfig
+++ b/Kconfig
@@ -1107,3 +1107,87 @@ config XDMAC
 	  Xdmac support
 endmenu
 
+menu "Boot logo"
+	depends on CPU_HAS_LCDC
+
+config LOGO
+	bool "Display logo"
+	select LCDC
+	default n
+	help
+	  Display boot logo in AT91bootstrap
+	  BMP format image is supported
+	  The file size limit is 32K-16
+
+config LOGO_NAME
+	string "Logo file name"
+	depends on LOGO && FATFS
+	default "logo.bmp"
+	help
+	  The name of the image file
+
+config LOGO_ADDRESS
+	string "Logo file address"
+	depends on LOGO && (DATAFLASH || NANDFLASH)
+	default "0x40000"
+	help
+	  The address of the image file in the Flash
+
+config LOGO_FB_ADDRESS
+	string "Logo framebuffer address"
+	depends on LOGO
+	default TOP_OF_MEMORY
+	help
+	  The address of the framebuffer in SRAM or DDR
+	  SRAM(TOP_OF_MEMORY) is used by default
+
+config LOGO_RGBDEF
+	string "Background color"
+	depends on LOGO
+	default "0x000000"
+	help
+	  Background color of the logo
+	  Format is 0xRRGGBB
+
+config LOGO_SCALE
+	string "Scaling rate"
+	depends on LOGO
+	default "0"
+	help
+	  Scale the logo if needed
+	  Only up scaling is supported
+	  The step is 0.125 (1/8), 0 means no scaling
+
+config LOGO_BL
+	string "Backlight brightness"
+	depends on LOGO
+	default "255"
+	help
+	  The brightness of backlight
+	  The value is from 0 ~ 255 (off ~ brightest)
+
+config LOGO_BL_DELAY
+	string "Backlight on delay"
+	depends on LOGO
+	default "0"
+	help
+	  Delay before turn on the backlight
+	  The unit is milliseconds
+
+choice
+	prompt "LCDC IOSET"
+	depends on LOGO && SAMA5D2
+        default LCDC_IOSET_1
+        help
+          Select the LCDC ioset
+
+config LCDC_IOSET_1
+        bool "IOSET 1 for SAMA5D27-SOM1-EK1"
+        depends on SAMA5D2
+
+config LCDC_IOSET_2
+        bool "IOSET 2 for SAMA5D2-XULT"
+        depends on SAMA5D2
+
+endchoice
+endmenu
diff --git a/Makefile b/Makefile
index 7c5dbbbd..9ea2ff6a 100644
--- a/Makefile
+++ b/Makefile
@@ -225,6 +225,16 @@ ifeq ($(IMAGE),)
 IMAGE=$(BOOT_NAME).bin
 endif
 
+ifeq ($(CONFIG_LOGO), y)
+LOGO_ADDRESS := $(strip $(subst ",,$(CONFIG_LOGO_ADDRESS)))
+LOGO_FB_ADDRESS := $(strip $(subst ",,$(CONFIG_LOGO_FB_ADDRESS)))
+LOGO_NAME := $(strip $(subst ",,$(CONFIG_LOGO_NAME)))
+LOGO_RGBDEF := $(strip $(subst ",,$(CONFIG_LOGO_RGBDEF)))
+LOGO_SCALE := $(strip $(subst ",,$(CONFIG_LOGO_SCALE)))
+LOGO_BL := $(strip $(subst ",,$(CONFIG_LOGO_BL)))
+LOGO_BL_DELAY := $(strip $(subst ",,$(CONFIG_LOGO_BL_DELAY)))
+endif
+
 ifeq ($(CONFIG_SDHC_ASYNC_READ), y)
 SDHC_ASYNC_READ_QUEUE_SIZE := $(strip $(subst ",,$(CONFIG_SDHC_ASYNC_READ_QUEUE_SIZE)))
 endif
diff --git a/device/Config.in b/device/Config.in
index 9d6108f3..558673fd 100644
--- a/device/Config.in
+++ b/device/Config.in
@@ -11,7 +11,7 @@ config LINK_ADDR
 
 config TOP_OF_MEMORY
 	string
-	default "0x310000"	if SAM9X60
+	default "0x308000"	if SAM9X60
 	default "0x308000"	if SAM9X7
 	default "0x310000"	if SAMA5D3X
 	default "0x210000"	if SAMA5D4
diff --git a/device/sam9x60/Config.in.device b/device/sam9x60/Config.in.device
index e0cc588d..776ff213 100644
--- a/device/sam9x60/Config.in.device
+++ b/device/sam9x60/Config.in.device
@@ -29,6 +29,7 @@ config	SAM9X60
 	select CPU_HAS_FLEXCOM12
 	select CPU_HAS_DDRC
 	select CPU_HAS_SDRAMC
+	select CPU_HAS_LCDC
 	select ALLOW_CPU_CLK_600MHZ
 	select ALLOW_CRYSTAL_24_000MHZ
 	select SUPPORT_BUS_SPEED_200MHZ
diff --git a/device/sam9x60/sam9x60.c b/device/sam9x60/sam9x60.c
index a4b8a5ae..eac3d368 100644
--- a/device/sam9x60/sam9x60.c
+++ b/device/sam9x60/sam9x60.c
@@ -603,3 +603,51 @@ void mmu_tlb_init(unsigned int *tlb)
 	           | TTB_TYPE_SECT;
 }
 #endif /* #ifdef CONFIG_MMU */
+
+#ifdef CONFIG_LCDC
+
+#define ATMEL_LCDC_GCKDIV_VALUE     0
+
+void at91_lcdc_hw_init(void)
+{
+	const struct pio_desc lcdc_pins[] = {
+		{"LCDVSYNC", AT91C_PIN_PC(27), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDHSYNC", AT91C_PIN_PC(28), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDDISP" , AT91C_PIN_PC(24), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDDEN"  , AT91C_PIN_PC(29), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDPCK"  , AT91C_PIN_PC(30), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD0"   , AT91C_PIN_PC(0) , 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD1"   , AT91C_PIN_PC(1) , 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD2"   , AT91C_PIN_PC(2) , 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD3"   , AT91C_PIN_PC(3) , 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD4"   , AT91C_PIN_PC(4) , 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD5"   , AT91C_PIN_PC(5) , 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD6"   , AT91C_PIN_PC(6) , 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD7"   , AT91C_PIN_PC(7) , 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD8"   , AT91C_PIN_PC(8) , 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD9"   , AT91C_PIN_PC(9) , 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD10"  , AT91C_PIN_PC(10), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD11"  , AT91C_PIN_PC(11), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD12"  , AT91C_PIN_PC(12), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD13"  , AT91C_PIN_PC(13), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD14"  , AT91C_PIN_PC(14), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD15"  , AT91C_PIN_PC(15), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD16"  , AT91C_PIN_PC(16), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD17"  , AT91C_PIN_PC(17), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD18"  , AT91C_PIN_PC(18), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD19"  , AT91C_PIN_PC(19), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD20"  , AT91C_PIN_PC(20), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD21"  , AT91C_PIN_PC(21), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD22"  , AT91C_PIN_PC(22), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD23"  , AT91C_PIN_PC(23), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDPWM" , AT91C_PIN_PC(26), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{(char *)0, 0, 0, PIO_DEFAULT, PIO_PERIPH_A},
+	};
+	pio_configure(lcdc_pins);
+
+	pmc_enable_periph_clock(CONFIG_SYS_ID_LCDC, PMC_PERIPH_CLK_DIVIDER_NA);
+	pmc_enable_generic_clock(CONFIG_SYS_ID_LCDC,
+				GCK_CSS_MCK_CLK,
+				ATMEL_LCDC_GCKDIV_VALUE);
+}
+#endif /* #ifdef CONFIG_LCDC */
diff --git a/device/sam9x60/sam9x60_board.h b/device/sam9x60/sam9x60_board.h
index eef69eea..459ff77c 100644
--- a/device/sam9x60/sam9x60_board.h
+++ b/device/sam9x60/sam9x60_board.h
@@ -86,4 +86,23 @@
 #define CONFIG_SYS_ID_XDMAC	AT91C_ID_XDMAC
 #endif
 
+/*
+ * LCDC Settings
+ */
+#ifdef CONFIG_LCDC
+#define CONFIG_SYS_BASE_LCDC	AT91C_BASE_LCDC
+#define CONFIG_SYS_ID_LCDC	AT91C_ID_LCDC
+
+#define BOARD_LCD_WIDTH		800
+#define BOARD_LCD_HEIGHT	480
+#define BOARD_LCD_FRAMERATE	60
+
+#define BOARD_LCD_TIMING_VFP	22
+#define BOARD_LCD_TIMING_VBP	21
+#define BOARD_LCD_TIMING_VPW	2
+#define BOARD_LCD_TIMING_HFP	64
+#define BOARD_LCD_TIMING_HBP	64
+#define BOARD_LCD_TIMING_HPW	128
+#endif
+
 #endif /* __DEV_SAM9X60_H__ */
diff --git a/device/sama5d2/Config.in.device b/device/sama5d2/Config.in.device
index ac79f36a..4d8b7317 100644
--- a/device/sama5d2/Config.in.device
+++ b/device/sama5d2/Config.in.device
@@ -26,6 +26,7 @@ config SAMA5D2
 	select CPU_HAS_QSPI_IOSET
 	select CPU_V7
 	select CPU_HAS_DDRC
+	select CPU_HAS_LCDC
 	select ALLOW_CPU_CLK_492MHZ
 	select ALLOW_CPU_CLK_498MHZ
 	select SUPPORT_BUS_SPEED_164MHZ
diff --git a/device/sama5d2/sama5d2.c b/device/sama5d2/sama5d2.c
index d18f3ceb..b026a38e 100644
--- a/device/sama5d2/sama5d2.c
+++ b/device/sama5d2/sama5d2.c
@@ -981,3 +981,80 @@ void mmu_tlb_init(unsigned int *tlb)
 	           | TTB_TYPE_SECT;
 }
 #endif /* #ifdef CONFIG_MMU */
+
+#ifdef CONFIG_LCDC
+
+#define ATMEL_LCDC_GCKDIV_VALUE     0
+
+void at91_lcdc_hw_init(void)
+{
+#if defined LCDC_IOSET_1
+	const struct pio_desc lcdc_pins[] = {
+		{"LCDVSYNC", AT91C_PIN_PC(5) , 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDHSYNC", AT91C_PIN_PC(6) , 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDDISP" , AT91C_PIN_PC(4) , 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDDEN"  , AT91C_PIN_PC(8) , 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDPCK"  , AT91C_PIN_PC(7) , 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD0"   , AT91C_PIN_PB(11), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD1"   , AT91C_PIN_PB(12), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD2"   , AT91C_PIN_PB(13), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD3"   , AT91C_PIN_PB(14), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD4"   , AT91C_PIN_PB(15), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD5"   , AT91C_PIN_PB(16), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD6"   , AT91C_PIN_PB(17), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD7"   , AT91C_PIN_PB(18), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD8"   , AT91C_PIN_PB(19), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD9"   , AT91C_PIN_PB(20), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD10"  , AT91C_PIN_PB(21), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD11"  , AT91C_PIN_PB(22), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD12"  , AT91C_PIN_PB(23), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD13"  , AT91C_PIN_PB(24), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD14"  , AT91C_PIN_PB(25), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD15"  , AT91C_PIN_PB(26), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD16"  , AT91C_PIN_PB(27), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD17"  , AT91C_PIN_PB(28), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD18"  , AT91C_PIN_PB(29), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD19"  , AT91C_PIN_PB(30), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD20"  , AT91C_PIN_PB(31), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD21"  , AT91C_PIN_PC(0) , 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD22"  , AT91C_PIN_PC(1) , 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD23"  , AT91C_PIN_PC(2) , 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDPWM"  , AT91C_PIN_PC(3) , 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{(char *)0, 0, 0, PIO_DEFAULT, PIO_PERIPH_A},
+		};
+#elif defined LCDC_IOSET_2
+	const struct pio_desc lcdc_pins[] = {
+		{"LCDVSYNC", AT91C_PIN_PC(30), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDHSYNC", AT91C_PIN_PC(31), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDDISP" , AT91C_PIN_PC(29), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDDEN"  , AT91C_PIN_PD(1) , 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDPCK"  , AT91C_PIN_PD(0) , 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD2"   , AT91C_PIN_PC(10), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD3"   , AT91C_PIN_PC(11), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD4"   , AT91C_PIN_PC(12), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD5"   , AT91C_PIN_PC(13), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD6"   , AT91C_PIN_PC(14), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD7"   , AT91C_PIN_PC(15), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD10"  , AT91C_PIN_PC(16), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD11"  , AT91C_PIN_PC(17), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD12"  , AT91C_PIN_PC(18), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD13"  , AT91C_PIN_PC(19), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD14"  , AT91C_PIN_PC(20), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD15"  , AT91C_PIN_PC(21), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD18"  , AT91C_PIN_PC(22), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD19"  , AT91C_PIN_PC(23), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD20"  , AT91C_PIN_PC(24), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD21"  , AT91C_PIN_PC(25), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD22"  , AT91C_PIN_PC(26), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDD23"  , AT91C_PIN_PC(27), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"LCDPWM"  , AT91C_PIN_PC(28), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{(char *)0, 0, 0, PIO_DEFAULT, PIO_PERIPH_A},
+		};
+#else
+#error "No LCDC IOSETs defined"
+#endif
+		pio_configure(lcdc_pins);
+
+		pmc_enable_periph_clock(CONFIG_SYS_ID_LCDC, PMC_PERIPH_CLK_DIVIDER_NA);
+}
+#endif /* #ifdef CONFIG_LCDC */
diff --git a/device/sama5d2/sama5d2_board.h b/device/sama5d2/sama5d2_board.h
index 9afdd688..38796892 100644
--- a/device/sama5d2/sama5d2_board.h
+++ b/device/sama5d2/sama5d2_board.h
@@ -148,4 +148,23 @@
 #define CONFIG_SYS_ID_XDMAC	AT91C_ID_XDMAC0
 #endif
 
+/*
+ * LCDC Settings
+ */
+#ifdef CONFIG_LCDC
+#define CONFIG_SYS_BASE_LCDC    AT91C_BASE_LCDC
+#define CONFIG_SYS_ID_LCDC      AT91C_ID_LCDC
+
+#define BOARD_LCD_WIDTH         800
+#define BOARD_LCD_HEIGHT        480
+#define BOARD_LCD_FRAMERATE     60
+
+#define BOARD_LCD_TIMING_VFP    22
+#define BOARD_LCD_TIMING_VBP    21
+#define BOARD_LCD_TIMING_VPW    2
+#define BOARD_LCD_TIMING_HFP    64
+#define BOARD_LCD_TIMING_HBP    64
+#define BOARD_LCD_TIMING_HPW    128
+#endif
+
 #endif
diff --git a/driver/Config.in.driver b/driver/Config.in.driver
index b245875d..92de7ddf 100644
--- a/driver/Config.in.driver
+++ b/driver/Config.in.driver
@@ -126,6 +126,14 @@ config CPU_HAS_XDMAC
 	bool
 	default n
 
+config LCDC
+	bool
+	default n
+
+config CPU_HAS_LCDC
+	bool
+	default n
+
 source "driver/Config.in.memory"
 
 config MMU
diff --git a/driver/at91_lcdc.c b/driver/at91_lcdc.c
new file mode 100644
index 00000000..b89dd564
--- /dev/null
+++ b/driver/at91_lcdc.c
@@ -0,0 +1,499 @@
+// Copyright (C) 2006 Microchip Technology Inc. and its subsidiaries
+//
+// SPDX-License-Identifier: MIT
+
+#include "common.h"
+#include "hardware.h"
+#include "board.h"
+#include "string.h"
+#include "arch/at91_lcdc.h"
+#include "debug.h"
+#include "div.h"
+#include "pmc.h"
+#include "timer.h"
+
+#define LCDC_DMA_ADDR LOGO_FB_ADDRESS
+#define LCDC_BMP_ADDR (LOGO_FB_ADDRESS + sizeof(struct dma_desc))
+
+#define LCDC_XPHIDEF  4
+#define LCDC_YPHIDEF  4
+
+#define BMP_LINE_ALIGN 4
+
+struct dma_desc {
+	u32 addr;
+	u32 ctrl;
+	u32 next;
+	u32 reserved;
+};
+
+struct lcdc_desc {
+	u16 width;     /**< Display image width */
+	u16 height;    /**< Display image height */
+	u16 framerate; /**< Frame rate in Hz */
+
+	u16 timing_vfp; /**< Vertical front porch in number of lines */
+	u16 timing_vbp; /**< Vertical back porch in number of lines */
+	u16 timing_vpw; /**< Vertical pulse width in number of lines */
+	u16 timing_hfp; /**< Horizontal front porch in LCDDOTCLK cycles */
+	u16 timing_hbp; /**< Horizontal back porch in LCDDOTCLK cycles */
+	u16 timing_hpw; /**< Horizontal pulse width in LCDDOTCLK cycles */
+
+	u16 ovr_mode;
+	u16 ovr_width;
+	u16 ovr_height;
+	u16 ovr_sc_width;
+	u16 ovr_sc_height;
+	u16 ovr_xpos;
+	u16 ovr_ypos;
+	u32 ovr_xstride;
+	u32 ovr_pstride;
+	struct dma_desc *ovr_dma;
+	u8 *ovr_buf;
+
+	u32 clut_size;
+
+	struct bmp_desc *bmp;
+};
+
+typedef enum {
+	BI_RGB       = 0x0000,
+	BI_RLE8      = 0x0001,
+	BI_RLE4      = 0x0002,
+	BI_BITFIELDS = 0x0003,
+	BI_JPEG      = 0x0004,
+	BI_PNG       = 0x0005,
+	BI_CMYK      = 0x000B,
+	BI_CMYKRLE8  = 0x000C,
+	BI_CMYKRLE4  = 0x000D
+} Compression;
+
+struct bit_fields {
+	u32 r_mask;
+	u32 g_mask;
+	u32 b_mask;
+} __attribute__ ((packed, aligned(1)));
+
+struct bmp_desc {
+	u8  bf_type[2];
+	u32 bf_size;
+	u16 bf_reserved1;
+	u16 bf_reserver2;
+	u32 bf_offbits;
+
+	u32 bi_size;
+	u32 bi_width;
+	u32 bi_height;
+	u16 bi_planes;
+	u16 bi_bitcount;
+	u32 bi_compression;
+	u32 bi_sizeimage;
+	u32 bi_xpelspermeter;
+	u32 bi_ypelspermeter;
+	u32 bi_clrused;
+	u32 bi_clrimportant;
+	u32 clut[];
+} __attribute__ ((packed, aligned(1)));
+
+static struct lcdc_desc lcdc = {
+	.width       = BOARD_LCD_WIDTH,
+	.height      = BOARD_LCD_HEIGHT,
+	.framerate   = BOARD_LCD_FRAMERATE,
+	.timing_vfp  = BOARD_LCD_TIMING_VFP,
+	.timing_vbp  = BOARD_LCD_TIMING_VBP,
+	.timing_vpw  = BOARD_LCD_TIMING_VPW,
+	.timing_hfp  = BOARD_LCD_TIMING_HFP,
+	.timing_hbp  = BOARD_LCD_TIMING_HBP,
+	.timing_hpw  = BOARD_LCD_TIMING_HPW,
+
+	.ovr_dma     = (struct dma_desc *)LCDC_DMA_ADDR,
+	.bmp         = (struct bmp_desc *)(LCDC_BMP_ADDR),
+};
+
+static u32 heo_upscaling_xcoef[] = {
+	0xf74949f7,
+	0x00000000,
+	0xf55f33fb,
+	0x000000fe,
+	0xf5701efe,
+	0x000000ff,
+	0xf87c0dff,
+	0x00000000,
+	0x00800000,
+	0x00000000,
+	0x0d7cf800,
+	0x000000ff,
+	0x1e70f5ff,
+	0x000000fe,
+	0x335ff5fe,
+	0x000000fb,
+};
+
+static u32 heo_upscaling_ycoef[] = {
+	0x00004040,
+	0x00075920,
+	0x00056f0c,
+	0x00027b03,
+	0x00008000,
+	0x00037b02,
+	0x000c6f05,
+	0x00205907,
+};
+
+static unsigned char lookup_table[16] = {
+	0x0, 0x8, 0x4, 0xc,
+	0x2, 0xa, 0x6, 0xe,
+	0x1, 0x9, 0x5, 0xd,
+	0x3, 0xb, 0x7, 0xf,
+};
+
+static inline unsigned char reverse_bit(unsigned char c)
+{
+	return (lookup_table[c & 0xf] << 4) | lookup_table[c >> 4];
+}
+
+static inline unsigned char reverse_4bit(unsigned char c)
+{
+	return (c >> 4) | (c << 4);
+}
+
+static inline unsigned int lcdc_get_base(void)
+{
+	return CONFIG_SYS_BASE_LCDC;
+}
+
+static inline unsigned int lcdc_get_clock(void)
+{
+#ifdef CONFIG_SAMA5D2
+	return pmc_mck_get_rate(CONFIG_SYS_ID_LCDC);
+#elif CONFIG_SAM9X60
+	return pmc_get_generic_clock(CONFIG_SYS_ID_LCDC);
+#endif
+}
+
+static unsigned int lcdc_readl(unsigned int reg)
+{
+	return readl(lcdc_get_base() + reg);
+}
+
+static void lcdc_writel(unsigned int reg, unsigned int value)
+{
+	writel(value, lcdc_get_base() + reg);
+}
+
+static void wait_for_clock_domain_sync(void)
+{
+	while (lcdc_readl(LCDC_SR) & LCDC_SR_SIPSTS);
+}
+
+static void set_phicoeff(u32 reg_base, const u32 *coeff_tab, u16 size)
+{
+	u32 i;
+
+	for (i = 0; i < size; i++)
+		lcdc_writel(reg_base + (i * 4), coeff_tab[i]);
+}
+
+static void set_clut(u32 reg_base, const u8 *clut, u16 size)
+{
+	u32 i;
+
+	for (i = 0; i < size*4; i += 4)
+		lcdc_writel(reg_base + i, clut[i] | clut[i+1]<<8 | clut[i+2]<<16);
+}
+
+static u32 get_factor(u32 srcsize, u32 dstsize, u32 phidef)
+{
+	u32 factor, max_memsize;
+
+	factor = div((256 * ((8 * (srcsize - 1)) - phidef)), (dstsize - 1));
+	max_memsize = ((factor * (dstsize - 1)) + (256 * phidef)) / 2048;
+
+	if (max_memsize > srcsize - 1)
+		factor--;
+
+	return factor;
+}
+
+static void lcdc_set_backlight(u8 level)
+{
+	u32 cfg = lcdc_readl(LCDC_CFG(6)) & ~LCDC_CFG6_PWMCVAL_MASK;
+	lcdc_writel(LCDC_CFG(6), cfg | LCDC_CFG6_PWMCVAL(level));
+}
+
+static void lcdc_off(void)
+{
+	lcdc_writel(LCDC_DIS, LCDC_DIS_PWMDIS);
+	while (lcdc_readl(LCDC_SR) & LCDC_SR_PWMSTS);
+
+	lcdc_writel(LCDC_DIS, LCDC_DIS_DISPDIS);
+	while (lcdc_readl(LCDC_SR) & LCDC_SR_DISPSTS);
+
+	lcdc_writel(LCDC_DIS, LCDC_DIS_SYNCDIS);
+	while (lcdc_readl(LCDC_SR) & LCDC_SR_LCDSTS);
+
+	lcdc_writel(LCDC_DIS, LCDC_DIS_CLKDIS);
+	while (lcdc_readl(LCDC_SR) & LCDC_SR_CLKSTS);
+}
+
+static void lcdc_on(void)
+{
+	u32 pixel_clock = lcdc.framerate;
+	u32 clk_div, remainder;
+
+	pixel_clock *= lcdc.timing_hpw + lcdc.timing_hbp +
+		lcdc.width + lcdc.timing_hfp;
+	pixel_clock *= lcdc.timing_vpw + lcdc.timing_vbp +
+		lcdc.height + lcdc.timing_vfp;
+
+	division(lcdc_get_clock(), pixel_clock, (unsigned int *)&clk_div, (unsigned int *)&remainder);
+	if (remainder > (pixel_clock / 2))
+		clk_div++;
+
+	wait_for_clock_domain_sync();
+	lcdc_writel(LCDC_CFG(0), LCDC_CFG0_CLKDIV(clk_div - 2) |
+				 LCDC_CFG0_CGDISPP |
+				 LCDC_CFG0_CGDISHEO |
+				 LCDC_CFG0_CGDISBASE |
+				 LCDC_CFG0_CLKPWMSEL);
+
+	wait_for_clock_domain_sync();
+	lcdc_writel(LCDC_CFG(1), LCDC_CFG1_VSPW(lcdc.timing_vpw - 1) |
+				 LCDC_CFG1_HSPW(lcdc.timing_hpw - 1));
+
+	wait_for_clock_domain_sync();
+	lcdc_writel(LCDC_CFG(2), LCDC_CFG2_VBPW(lcdc.timing_vbp) |
+				 LCDC_CFG2_VFPW(lcdc.timing_vfp - 1));
+
+	wait_for_clock_domain_sync();
+	lcdc_writel(LCDC_CFG(3), LCDC_CFG3_HBPW(lcdc.timing_hbp - 1) |
+				 LCDC_CFG3_HFPW(lcdc.timing_hfp - 1));
+
+	wait_for_clock_domain_sync();
+	lcdc_writel(LCDC_CFG(4), LCDC_CFG4_RPF(lcdc.height - 1) |
+				 LCDC_CFG4_PPL(lcdc.width - 1));
+
+	wait_for_clock_domain_sync();
+	lcdc_writel(LCDC_CFG(5), LCDC_CFG5_GUARDTIME(0) |
+				 LCDC_CFG5_MODE_OUTPUT_24BPP |
+				 LCDC_CFG5_DISPDLY |
+				 LCDC_CFG5_VSPDLYS |
+				 LCDC_CFG5_VSPOL |
+				 LCDC_CFG5_HSPOL);
+
+	wait_for_clock_domain_sync();
+	lcdc_writel(LCDC_CFG(6), LCDC_CFG6_PWMCVAL(0) |
+				 LCDC_CFG6_PWMPOL |
+				 LCDC_CFG6_PWMPS(6));
+
+	wait_for_clock_domain_sync();
+	lcdc_writel(LCDC_EN, LCDC_EN_CLKEN);
+	while (!(lcdc_readl(LCDC_SR) & LCDC_SR_CLKSTS));
+
+	wait_for_clock_domain_sync();
+	lcdc_writel(LCDC_EN, LCDC_EN_SYNCEN);
+	while (!(lcdc_readl(LCDC_SR) & LCDC_SR_LCDSTS));
+
+	wait_for_clock_domain_sync();
+	lcdc_writel(LCDC_EN, LCDC_EN_DISPEN);
+	while (!(lcdc_readl(LCDC_SR) & LCDC_SR_DISPSTS));
+
+	wait_for_clock_domain_sync();
+	lcdc_writel(LCDC_EN, LCDC_EN_PWMEN);
+}
+
+void lcdc_show_base(void)
+{
+	lcdc_writel(LCDC_BASECFG(1), LAYER_RGB_888_PACKED);
+	lcdc_writel(LCDC_BASECFG(3), LAYER_RGB(LOGO_RGBDEF));
+	lcdc_writel(LCDC_BASECHER, LAYER_UPDATE | LAYER_CH);
+}
+
+void lcdc_show_heo(void)
+{
+	/* Base configuration */
+	lcdc_writel(LCDC_HEOCFG(0), LAYER_ROT);
+	lcdc_writel(LCDC_HEOCFG(1), lcdc.ovr_mode);
+	lcdc_writel(LCDC_HEOCFG(2), LAYER_POS(lcdc.ovr_xpos, lcdc.ovr_ypos));
+	lcdc_writel(LCDC_HEOCFG(3), LAYER_SIZE(lcdc.ovr_sc_width, lcdc.ovr_sc_height));
+	lcdc_writel(LCDC_HEOCFG(4), LAYER_SIZE(lcdc.ovr_width, lcdc.ovr_height));
+	if (lcdc.ovr_xstride)
+		lcdc_writel(LCDC_HEOCFG(5), LAYER_STRIDE(lcdc.ovr_xstride));
+	if (lcdc.ovr_pstride)
+		lcdc_writel(LCDC_HEOCFG(6), LAYER_STRIDE(lcdc.ovr_pstride));
+	lcdc_writel(LCDC_HEOCFG(9), LAYER_RGB(LOGO_RGBDEF));
+
+	/* Configure CULT if needed */
+	if (lcdc.ovr_mode | LAYER_CLUT)
+		set_clut(LCDC_HEOCLUT(0), (u8 *)lcdc.bmp->clut, lcdc.clut_size);
+
+	/* Configure scaler if needed */
+	if (lcdc.ovr_width != lcdc.ovr_sc_width) {
+		set_phicoeff(LCDC_HEOCFG(17), heo_upscaling_xcoef, sizeof(heo_upscaling_xcoef) / sizeof(u32));
+		set_phicoeff(LCDC_HEOCFG(33), heo_upscaling_ycoef, sizeof(heo_upscaling_ycoef) / sizeof(u32));
+		lcdc_writel(LCDC_HEOCFG(13), LAYER_SCAL |
+			(get_factor(lcdc.ovr_height, lcdc.ovr_sc_height, LCDC_YPHIDEF) << 16) |
+			(get_factor(lcdc.ovr_width, lcdc.ovr_sc_width, LCDC_XPHIDEF) << 0));
+	}
+
+	lcdc_writel(LCDC_HEOADDR, (u32)lcdc.ovr_buf);
+	lcdc_writel(LCDC_HEOCTRL, LAYER_DFETCH);
+	lcdc_writel(LCDC_HEONEXT, (u32)lcdc.ovr_dma);
+	lcdc_writel(LCDC_HEOCFG(12), LAYER_GA(0xff) | LAYER_DMA | LAYER_OVR | LAYER_GAEN);
+
+	lcdc_writel(LCDC_HEOCHER, LAYER_UPDATE | LAYER_CH);
+}
+
+void lcdc_init(void)
+{
+	/* Invalidate bmp struct buffer */
+	lcdc.bmp->bf_type[0] = 0;
+	lcdc.bmp->bf_type[1] = 0;
+
+	at91_lcdc_hw_init();
+	lcdc_off();
+	lcdc_on();
+	lcdc_show_base();
+}
+
+int lcdc_display(void)
+{
+	u32 i;
+	u32 line_bytes;
+	u8 line_padding;
+	struct bit_fields *bf = NULL;
+
+	if ((lcdc.bmp->bf_type[0] != 'B') || (lcdc.bmp->bf_type[1] != 'M')) {
+		dbg_printf("LCDC: bmp file not found\n\r");
+		return -1;
+	}
+
+	switch (lcdc.bmp->bi_bitcount) {
+	case 32:
+		line_bytes = lcdc.bmp->bi_width * 4;
+
+		if (lcdc.bmp->bi_compression == BI_RGB) {
+			lcdc.ovr_mode = LAYER_ARGB_8888;
+		} else if (lcdc.bmp->bi_compression == BI_BITFIELDS) {
+			bf = (struct bit_fields *)&lcdc.bmp->clut;
+
+			if ((bf->r_mask == 0xff0000) && (bf->g_mask == 0xff00) && (bf->b_mask == 0xff))
+				lcdc.ovr_mode = LAYER_ARGB_8888;
+			else
+				goto UNSUPPORTED;
+		}
+		break;
+
+	case 24:
+		line_bytes = lcdc.bmp->bi_width * 3;
+		lcdc.ovr_mode = LAYER_RGB_888_PACKED;
+		break;
+
+	case 16:
+		line_bytes = lcdc.bmp->bi_width * 2;
+
+		if (lcdc.bmp->bi_compression == BI_RGB) {
+			lcdc.ovr_mode = LAYER_TRGB_1555;
+		} else if (lcdc.bmp->bi_compression == BI_BITFIELDS) {
+			bf = (struct bit_fields *)&lcdc.bmp->clut;
+
+			if ((bf->r_mask == 0x7c00) && (bf->g_mask == 0x03e0) && (bf->b_mask == 0x001f))
+				lcdc.ovr_mode = LAYER_TRGB_1555;
+			else if ((bf->r_mask == 0xf800) && (bf->g_mask == 0x07e0) && (bf->b_mask == 0x001f))
+				lcdc.ovr_mode = LAYER_RGB_565;
+			else
+				goto UNSUPPORTED;
+		} else {
+			goto UNSUPPORTED;
+		}
+		break;
+
+	case 8:
+		line_bytes = lcdc.bmp->bi_width * 1;
+		lcdc.ovr_mode  = LAYER_CLUT_8BPP | LAYER_CLUT;
+		lcdc.clut_size = 256;
+		break;
+
+	case 4:
+		line_bytes = lcdc.bmp->bi_width / 2;
+		if (lcdc.bmp->bi_width & 0x1) {
+			line_bytes++;
+			dbg_printf("LCDC: ERROR logo width %d is not 2 pixels aligned\n", lcdc.bmp->bi_width);
+		}
+		lcdc.ovr_mode = LAYER_CLUT_4BPP | LAYER_CLUT;
+		lcdc.clut_size = 16;
+		break;
+
+	case 1:
+		line_bytes = lcdc.bmp->bi_width / 8;
+		if (lcdc.bmp->bi_width & 0x7) {
+			line_bytes++;
+			dbg_printf("LCDC: ERROR logo width %d is not 8 pixels aligned\n", lcdc.bmp->bi_width);
+		}
+		lcdc.ovr_mode = LAYER_CLUT_1BPP | LAYER_CLUT;
+		lcdc.clut_size = 2;
+		break;
+
+	default:
+UNSUPPORTED:
+		dbg_printf("LCDC: unsupported bmp format, bitcount=%d compression=%x\n\r", lcdc.bmp->bi_bitcount, lcdc.bmp->bi_compression);
+		if ((lcdc.bmp->bi_compression == BI_BITFIELDS) && bf)
+			dbg_printf("LCDC: r_mask=%x, g_mask=%x, b_mask=%x\n\r", bf->r_mask, bf->g_mask, bf->b_mask);
+		return -1;
+	}
+
+	line_padding = line_bytes & (BMP_LINE_ALIGN - 1);
+	if (line_padding)
+		line_padding = BMP_LINE_ALIGN - line_padding;
+
+	lcdc.ovr_buf    = (u8 *)(LCDC_BMP_ADDR + lcdc.bmp->bf_offbits);
+	lcdc.ovr_width  = lcdc.bmp->bi_width;
+
+	if ((lcdc.bmp->bi_bitcount == 1) || (lcdc.bmp->bi_bitcount == 4)) {
+		u32 lines = (int)lcdc.bmp->bi_height >= 0 ? lcdc.bmp->bi_height : -lcdc.bmp->bi_height;
+
+		for (i = 0; i < ((line_bytes + line_padding) * lines); i++) {
+				if (lcdc.bmp->bi_bitcount == 1)
+					lcdc.ovr_buf[i] = reverse_bit(lcdc.ovr_buf[i]);
+				else if (lcdc.bmp->bi_bitcount == 4)
+					lcdc.ovr_buf[i] = reverse_4bit(lcdc.ovr_buf[i]);
+		}
+	}
+
+	if (((int)lcdc.bmp->bi_height) > 0) {
+		lcdc.ovr_height  = lcdc.bmp->bi_height;
+		lcdc.ovr_xstride = -(line_bytes * 2 + line_padding);
+		lcdc.ovr_buf     += (line_bytes + line_padding) * (lcdc.ovr_height - 1);
+	} else {
+		lcdc.ovr_height  = -lcdc.bmp->bi_height;
+		lcdc.ovr_xstride = line_padding;
+	}
+
+	lcdc.ovr_sc_width  = (LOGO_SCALE == 0) ? lcdc.ovr_width : (lcdc.ovr_width * (8 + LOGO_SCALE) / 8);
+	lcdc.ovr_sc_height = (LOGO_SCALE == 0) ? lcdc.ovr_height : (lcdc.ovr_height * (8 + LOGO_SCALE) / 8);
+	lcdc.ovr_xpos      = (lcdc.ovr_sc_width >= lcdc.width) ? 0 : ((lcdc.width - lcdc.ovr_sc_width) / 2);
+	lcdc.ovr_ypos      = (lcdc.ovr_sc_height >= lcdc.height) ? 0 : ((lcdc.height - lcdc.ovr_sc_height) / 2);
+
+	lcdc.ovr_dma->addr = (u32)lcdc.ovr_buf;
+	lcdc.ovr_dma->ctrl = LAYER_DFETCH;
+	lcdc.ovr_dma->next = (u32)lcdc.ovr_dma;
+	lcdc.ovr_dma->reserved = 0;
+
+	lcdc_show_heo();
+	if (LOGO_BL_DELAY)
+		mdelay(LOGO_BL_DELAY);
+	lcdc_set_backlight(LOGO_BL);
+
+	return 0;
+}
+
+int bmp_size(void *p)
+{
+	struct bmp_desc *bmp = p;
+
+	if ((bmp->bf_type[0] == 'B') && (bmp->bf_type[1] == 'M')) {
+		return bmp->bf_size;
+	}
+
+	return 0;
+}
diff --git a/driver/common.c b/driver/common.c
index 5a7598a9..6a38aaa4 100644
--- a/driver/common.c
+++ b/driver/common.c
@@ -25,6 +25,10 @@ char cmdline_args[CMDLINE_BUF_LEN];
 #endif
 #endif
 
+#if defined(CONFIG_LOGO) && defined(CONFIG_SDCARD)
+char logo_filename[FILENAME_BUF_LEN];
+#endif
+
 #ifdef CONFIG_LOAD_SW
 
 load_function get_image_load_func(void)
@@ -65,6 +69,10 @@ void init_load_image(struct image_info *image)
 #endif
 #endif
 
+#if defined(CONFIG_LOGO) && defined(CONFIG_SDCARD)
+	memset(logo_filename,   0, FILENAME_BUF_LEN);
+#endif
+
 #if defined(CONFIG_DATAFLASH) || defined(CONFIG_NANDFLASH) || defined(CONFIG_FLASH)
 
 #if !defined(CONFIG_LOAD_LINUX) && !defined(CONFIG_LOAD_ANDROID)
@@ -101,6 +109,17 @@ void init_load_image(struct image_info *image)
 #else
 	load_image = get_image_load_func();
 #endif
+
+#ifdef CONFIG_LOGO
+#if defined(CONFIG_DATAFLASH) || defined(CONFIG_NANDFLASH)
+	image->logo_offset = LOGO_ADDRESS;
+#endif
+#ifdef CONFIG_SDCARD
+	image->logo_filename = logo_filename;
+	strcpy(image->logo_filename, LOGO_NAME);
+#endif
+	image->logo_dest = (unsigned char *)(LOGO_FB_ADDRESS + 16);
+#endif
 }
 #endif /* CONFIG_LOAD_SW */
 
diff --git a/driver/driver.mk b/driver/driver.mk
index 3ca6f842..84a41809 100644
--- a/driver/driver.mk
+++ b/driver/driver.mk
@@ -114,3 +114,4 @@ COBJS-$(CONFIG_SFRBU)		+= $(DRIVERS_SRC)/sfrbu.o
 COBJS-$(CONFIG_CACHES)		+= $(DRIVERS_SRC)/l1cache.o
 COBJS-$(CONFIG_MMU)		+= $(DRIVERS_SRC)/mmu.o
 COBJS-$(CONFIG_XDMAC)	+= $(DRIVERS_SRC)/at91_xdmac.o
+COBJS-$(CONFIG_LCDC)		+= $(DRIVERS_SRC)/at91_lcdc.o
diff --git a/driver/driver_cpp.mk b/driver/driver_cpp.mk
index 0d3b6f9f..78192322 100644
--- a/driver/driver_cpp.mk
+++ b/driver/driver_cpp.mk
@@ -215,6 +215,10 @@ ifeq ($(CONFIG_WDTS), y)
 CPPFLAGS += -DCONFIG_WDTS
 endif
 
+ifeq ($(CONFIG_LCDC), y)
+CPPFLAGS += -DCONFIG_LCDC
+endif
+
 ifeq ($(CONFIG_SDHC_ASYNC_READ),y)
 CPPFLAGS += -DCONFIG_SDHC_ASYNC_READ
 CPPFLAGS += -DSDHC_ASYNC_READ_QUEUE_SIZE=$(SDHC_ASYNC_READ_QUEUE_SIZE)
diff --git a/driver/nandflash.c b/driver/nandflash.c
index b7af8a89..469dc0d0 100644
--- a/driver/nandflash.c
+++ b/driver/nandflash.c
@@ -26,6 +26,7 @@
 #ifdef CONFIG_NAND_DMA_SUPPORT
 #include "xdmac.h"
 #endif
+#include "lcdc.h"
 
 #ifdef CONFIG_NANDFLASH_SMALL_BLOCKS
 static struct nand_chip nand_ids[] = {
@@ -1381,6 +1382,22 @@ int load_nandflash(struct image_info *image)
 	dbg_info("NAND: Using Software ECC\n");
 #endif
 
+#ifdef CONFIG_LOGO
+	ret = nand_loadimage(&nand, image->logo_offset, nand.pagesize,
+				image->logo_dest);
+	if (!ret) {
+		int length = bmp_size(image->logo_dest);
+		if (length > nand.pagesize)
+			ret = nand_loadimage(&nand,
+					image->logo_offset + nand.pagesize,
+					length - nand.pagesize,
+					image->logo_dest + nand.pagesize);
+	}
+
+	if (!ret)
+		lcdc_display();
+#endif
+
 #if defined(CONFIG_LOAD_LINUX) || defined(CONFIG_LOAD_ANDROID)
 	int length = update_image_length(&nand,
 				image->offset, image->dest, KERNEL_IMAGE);
diff --git a/driver/sdcard.c b/driver/sdcard.c
index 2a45efa4..1bce41a6 100644
--- a/driver/sdcard.c
+++ b/driver/sdcard.c
@@ -6,6 +6,7 @@
 #include "common.h"
 #include "hardware.h"
 #include "board.h"
+#include "lcdc.h"
 
 #include "string.h"
 
@@ -124,6 +125,15 @@ int load_sdcard(struct image_info *image)
 		return -1;
 	}
 
+#ifdef CONFIG_LOGO
+	dbg_info("SD/MMC: Lcdc: Read file %s to %x\n",
+					image->logo_filename, image->logo_dest);
+
+	ret = sdcard_loadimage(image->logo_filename, image->logo_dest);
+	if (!ret)
+		lcdc_display();
+#endif
+
 	dbg_info("SD/MMC: Image: Read file %s to %x\n",
 					image->filename, image->dest);
 
diff --git a/driver/spi_flash/spi_flash.c b/driver/spi_flash/spi_flash.c
index a9b332dd..d1c40138 100644
--- a/driver/spi_flash/spi_flash.c
+++ b/driver/spi_flash/spi_flash.c
@@ -10,6 +10,7 @@
 #include "timer.h"
 #include "div.h"
 #include "fdt.h"
+#include "lcdc.h"
 
 int spi_flash_read_reg(struct spi_flash *flash, u8 inst, u8 *buf, size_t len)
 {
@@ -300,6 +301,24 @@ int spi_flash_loadimage(struct spi_flash *flash, struct image_info *image)
 	}
 #endif /* CONFIG_DATAFLASH_RECOVERY */
 
+#ifdef CONFIG_LOGO
+	ret = spi_flash_read(flash,
+			     image->logo_offset,
+			     flash->page_size,
+			     image->logo_dest);
+	if (!ret) {
+		int length = bmp_size(image->logo_dest);
+		if (length > flash->page_size)
+			ret = spi_flash_read(flash,
+					image->logo_offset + flash->page_size,
+					length - flash->page_size,
+					image->logo_dest + flash->page_size);
+	}
+
+	if (!ret)
+		lcdc_display();
+#endif
+
 #ifdef CONFIG_OF_LIBFDT
 	length = update_image_length(flash,
 				     image->of_offset,
diff --git a/include/arch/at91_lcdc.h b/include/arch/at91_lcdc.h
new file mode 100755
index 00000000..2ff86eb3
--- /dev/null
+++ b/include/arch/at91_lcdc.h
@@ -0,0 +1,255 @@
+/*
+ * Copyright (C) 2013 Microchip Technology Inc. and its subsidiaries
+ *
+ * SPDX-License-Identifier: MIT
+ */
+
+#ifndef	__AT91_LCDC_H__
+#define	__AT91_LCDC_H__
+
+/*
+ * Register Definitions
+ */
+#define LCDC_CFG(i)	((i) * 0x4)
+#define LCDC_EN		0x20
+#define LCDC_DIS	0x24
+#define LCDC_SR		0x28
+#define LCDC_IER	0x2c
+#define LCDC_IDR	0x30
+#define LCDC_IMR	0x34
+#define LCDC_ISR	0x38
+#define LCDC_ATTR	0x3C
+#define LCDC_QOSCFG	0x40
+#define LCDC_QOS1M	0x44
+#define LCDC_QOS2M	0x48
+#define LCDC_QOS3M	0x4C
+#define LCDC_QOSMIN	0x50
+
+#if defined(CONFIG_SAMA5D2)
+#define LCDC_BASE_BASE	0x40
+#elif defined(CONFIG_SAM9X60)
+#define LCDC_BASE_BASE	0x60
+#endif
+#define LCDC_BASECHER	(LCDC_BASE_BASE)
+#define LCDC_BASECHDR	(LCDC_BASE_BASE + 0x04)
+#define LCDC_BASECHSR	(LCDC_BASE_BASE + 0x08)
+#define LCDC_BASEIER	(LCDC_BASE_BASE + 0x0C)
+#define LCDC_BASEIDR	(LCDC_BASE_BASE + 0x10)
+#define LCDC_BASEIMR	(LCDC_BASE_BASE + 0x14)
+#define LCDC_BASEISR	(LCDC_BASE_BASE + 0x18)
+#define LCDC_BASEHEAD	(LCDC_BASE_BASE + 0x1C)
+#define LCDC_BASEADDR	(LCDC_BASE_BASE + 0x20)
+#define LCDC_BASECTRL	(LCDC_BASE_BASE + 0x24)
+#define LCDC_BASENEXT	(LCDC_BASE_BASE + 0x28)
+#define LCDC_BASECFG(i)	(LCDC_BASE_BASE + 0x2C + ((i) * 0x4))
+
+#if defined(CONFIG_SAMA5D2)
+#define LCDC_OVR1_BASE	0x140
+#elif defined(CONFIG_SAM9X60)
+#define LCDC_OVR1_BASE	0x160
+#endif
+#define LCDC_OVR1CHER	(LCDC_OVR1_BASE)
+#define LCDC_OVR1CHDR	(LCDC_OVR1_BASE + 0x04)
+#define LCDC_OVR1CHSR	(LCDC_OVR1_BASE + 0x08)
+#define LCDC_OVR1IER	(LCDC_OVR1_BASE + 0x0C)
+#define LCDC_OVR1IDR	(LCDC_OVR1_BASE + 0x10)
+#define LCDC_OVR1IMR	(LCDC_OVR1_BASE + 0x14)
+#define LCDC_OVR1ISR	(LCDC_OVR1_BASE + 0x18)
+#define LCDC_OVR1HEAD	(LCDC_OVR1_BASE + 0x1C)
+#define LCDC_OVR1ADDR	(LCDC_OVR1_BASE + 0x20)
+#define LCDC_OVR1CTRL	(LCDC_OVR1_BASE + 0x24)
+#define LCDC_OVR1NEXT	(LCDC_OVR1_BASE + 0x28)
+#define LCDC_OVR1CFG(i)	(LCDC_OVR1_BASE + 0x2C + ((i) * 0x4))
+
+#if defined(CONFIG_SAMA5D2)
+#define LCDC_HEO_BASE	0x340
+#elif defined(CONFIG_SAM9X60)
+#define LCDC_HEO_BASE	0x360
+#endif
+#define LCDC_HEOCHER	(LCDC_HEO_BASE)
+#define LCDC_HEOCHDR	(LCDC_HEO_BASE + 0x04)
+#define LCDC_HEOCHSR	(LCDC_HEO_BASE + 0x08)
+#define LCDC_HEOIER	(LCDC_HEO_BASE + 0x0C)
+#define LCDC_HEOIDR	(LCDC_HEO_BASE + 0x10)
+#define LCDC_HEOIMR	(LCDC_HEO_BASE + 0x14)
+#define LCDC_HEOISR	(LCDC_HEO_BASE + 0x18)
+#define LCDC_HEOHEAD	(LCDC_HEO_BASE + 0x1C)
+#define LCDC_HEOADDR	(LCDC_HEO_BASE + 0x20)
+#define LCDC_HEOCTRL	(LCDC_HEO_BASE + 0x24)
+#define LCDC_HEONEXT	(LCDC_HEO_BASE + 0x28)
+#define LCDC_HEOUHEAD	(LCDC_HEO_BASE + 0x2C)
+#define LCDC_HEOUADDR	(LCDC_HEO_BASE + 0x30)
+#define LCDC_HEOUCTRL	(LCDC_HEO_BASE + 0x34)
+#define LCDC_HEOUNEXT	(LCDC_HEO_BASE + 0x38)
+#define LCDC_HEOVHEAD	(LCDC_HEO_BASE + 0x3C)
+#define LCDC_HEOVADDR	(LCDC_HEO_BASE + 0x40)
+#define LCDC_HEOVCTRL	(LCDC_HEO_BASE + 0x44)
+#define LCDC_HEOVNEXT	(LCDC_HEO_BASE + 0x48)
+#define LCDC_HEOCFG(i)	(LCDC_HEO_BASE + 0x4C + ((i) * 0x4))
+#define LCDC_HEOCLUT(i)	(0x1200 + ((i) * 0x4))
+
+/*
+ * Register Field Definitions
+ */
+/* LCDC_CFG0 */
+#define LCDC_CFG0_CLKPOL	(0x1 << 0)
+#define LCDC_CFG0_CLKSEL	(0x1 << 2)
+#define LCDC_CFG0_CLKPWMSEL	(0x1 << 3)
+#define LCDC_CFG0_CGDISBASE	(0x1 << 8)
+#define LCDC_CFG0_CGDISOVR1	(0x1 << 9)
+#define LCDC_CFG0_CGDISOVR2	(0x1 << 10)
+#define LCDC_CFG0_CGDISHEO	(0x1 << 11)
+#define LCDC_CFG0_CGDISPP	(0x1 << 13)
+#define LCDC_CFG0_CLKDIV_MASK	(0xff << 16)
+#define LCDC_CFG0_CLKDIV(x)	(((x) << 16) & LCDC_CFG0_CLKDIV_MASK)
+
+/* LCDC_CFG1 */
+#define LCDC_CFG1_HSPW_MASK	(0x3ff << 0)
+#define LCDC_CFG1_HSPW(x)	(((x) << 0) & LCDC_CFG1_HSPW_MASK)
+#define LCDC_CFG1_VSPW_MASK	(0x3ff << 16)
+#define LCDC_CFG1_VSPW(x)	(((x) << 16) & LCDC_CFG1_VSPW_MASK)
+
+/* LCDC_CFG2 */
+#define LCDC_CFG2_VFPW_MASK	(0x3ff << 0)
+#define LCDC_CFG2_VFPW(x)	(((x) << 0) & LCDC_CFG2_VFPW_MASK)
+#define LCDC_CFG2_VBPW_MASK	(0x3ff << 16)
+#define LCDC_CFG2_VBPW(x)	(((x) << 16) & LCDC_CFG2_VBPW_MASK)
+
+/* LCDC_CFG3 */
+#define LCDC_CFG3_HFPW_MASK	(0x3ff << 0)
+#define LCDC_CFG3_HFPW(x)	(((x) << 0) & LCDC_CFG3_HFPW_MASK)
+#define LCDC_CFG3_HBPW_MASK	(0x3ff << 16)
+#define LCDC_CFG3_HBPW(x)	(((x) << 16) & LCDC_CFG3_HBPW_MASK)
+
+/* LCDC_CFG4 */
+#define LCDC_CFG4_PPL_MASK	(0x7ff << 0)
+#define LCDC_CFG4_PPL(x)	(((x) << 0) & LCDC_CFG4_PPL_MASK)
+#define LCDC_CFG4_RPF_MASK	(0x7ff << 16)
+#define LCDC_CFG4_RPF(x)	(((x) << 16) & LCDC_CFG4_RPF_MASK)
+
+/* LCDC_CFG5 */
+#define LCDC_CFG5_HSPOL			(0x1 << 0)
+#define LCDC_CFG5_VSPOL			(0x1 << 1)
+#define LCDC_CFG5_VSPDLYS		(0x1 << 2)
+#define LCDC_CFG5_VSPDLYE		(0x1 << 3)
+#define LCDC_CFG5_DISPPOL		(0x1 << 4)
+#define LCDC_CFG5_DITHER		(0x1 << 6)
+#define LCDC_CFG5_DISPDLY		(0x1 << 7)
+#define LCDC_CFG5_MODE_MASK		(0x3 << 8)
+#define LCDC_CFG5_MODE(x)		(((x) << 8) & LCDC_CFG5_MODE_MASK)
+#define     LCDC_CFG5_MODE_OUTPUT_12BPP	(0x0 << 8)
+#define     LCDC_CFG5_MODE_OUTPUT_16BPP	(0x1 << 8)
+#define     LCDC_CFG5_MODE_OUTPUT_18BPP	(0x2 << 8)
+#define     LCDC_CFG5_MODE_OUTPUT_24BPP	(0x3 << 8)
+#define LCDC_CFG5_VSPSU			(0x1 << 12)
+#define LCDC_CFG5_VSPHO			(0x1 << 13)
+#define LCDC_CFG5_GUARDTIME_MASK	(0xff << 16)
+#define LCDC_CFG5_GUARDTIME(x)		(((x) << 16) & LCDC_CFG5_GUARDTIME_MASK)
+
+/* LCDC_CFG6 */
+#define LCDC_CFG6_PWMPS_MASK	(0x7 << 0)
+#define LCDC_CFG6_PWMPS(x)	(((x) << 0) & LCDC_CFG6_PWMPS_MASK)
+#define LCDC_CFG6_PWMPOL	(0x1 << 4)
+#define LCDC_CFG6_PWMCVAL_MASK	(0xff << 8)
+#define LCDC_CFG6_PWMCVAL(x)	(((x) << 8) & LCDC_CFG6_PWMCVAL_MASK)
+
+/* LCDC_CFG7 */
+#define LCDC_CFG7_ROW_MASK	(0x7ff << 0)
+#define LCDC_CFG7_ROW(x)	(((x) << 0) & LCDC_CFG7_ROW_MASK)
+
+/* LCDC_EN */
+#define LCDC_EN_CLKEN	(0x1 << 0)
+#define LCDC_EN_SYNCEN	(0x1 << 1)
+#define LCDC_EN_DISPEN	(0x1 << 2)
+#define LCDC_EN_PWMEN	(0x1 << 3)
+
+/* LCDC_DIS */
+#define LCDC_DIS_CLKDIS		(0x1 << 0)
+#define LCDC_DIS_SYNCDIS	(0x1 << 1)
+#define LCDC_DIS_DISPDIS	(0x1 << 2)
+#define LCDC_DIS_PWMDIS		(0x1 << 3)
+#define LCDC_DIS_CLKRST		(0x1 << 8)
+#define LCDC_DIS_SYNCRST	(0x1 << 9)
+#define LCDC_DIS_DISPRST	(0x1 << 10)
+#define LCDC_DIS_PWMRST		(0x1 << 11)
+
+/* LCDC_SR */
+#define LCDC_SR_CLKSTS	(0x1 << 0)
+#define LCDC_SR_LCDSTS	(0x1 << 1)
+#define LCDC_SR_DISPSTS	(0x1 << 2)
+#define LCDC_SR_PWMSTS	(0x1 << 3)
+#define LCDC_SR_SIPSTS	(0x1 << 4)
+
+/* LCDC_LAYER */
+#define LAYER_CH	(0x1 << 0)
+#define LAYER_UPDATE	(0x1 << 1)
+#define LAYER_A2Q	(0x1 << 2)
+#define LAYER_RST	(0x1 << 8)
+
+#define LAYER_DFETCH	(0x1 << 0)
+#define LAYER_LFETCH	(0x1 << 1)
+#define LAYER_IRQ_DMA	(0x1 << 2)
+#define LAYER_IRQ_DSCR	(0x1 << 3)
+#define LAYER_IRQ_ADD	(0x1 << 4)
+#define LAYER_IRQ_DONE	(0x1 << 5)
+#define LAYER_IRQ_OVR	(0x1 << 6)
+
+#define LAYER_HEAD(x)	(((x) << 2) & 0xfffffffc)
+#define LAYER_ADDR(x)	(((x) << 0) & 0xffffffff)
+#define LAYER_NEXT(x)	(((x) << 0) & 0xffffffff)
+
+#define LAYER_BLEN_MASK		(0x3 << 4)
+#define LAYER_BLEN_SINGLE	(0 << 4)
+#define LAYER_BLEN_INCR4	(1 << 4)
+#define LAYER_BLEN_INCR8	(2 << 4)
+#define LAYER_BLEN_INCR16	(3 << 4)
+#define LAYER_DLBO		(0x1 << 8)
+#define LAYER_ROT		(0x1 << 12)
+#define LAYER_LOCK		(0x1 << 13)
+
+#define LAYER_CLUT		(0x1 << 0)
+#define LAYER_RGB_MASK		(0xf << 4)
+#define LAYER_RGB_444		(0 << 4)
+#define LAYER_ARGB_4444		(1 << 4)
+#define LAYER_RGBA_4444		(2 << 4)
+#define LAYER_RGB_565		(3 << 4)
+#define LAYER_TRGB_1555		(4 << 4)
+#define LAYER_18BPP_RGB_666	(5 << 4)
+#define LAYER_RGB_666PACKED	(6 << 4)
+#define LAYER_TRGB_1666		(7 << 4)
+#define LAYER_TRGB_PACKED	(8 << 4)
+#define LAYER_RGB_888		(9 << 4)
+#define LAYER_RGB_888_PACKED	(10 << 4)
+#define LAYER_TRGB_1888		(11 << 4)
+#define LAYER_ARGB_8888		(12 << 4)
+#define LAYER_RGBA_8888		(13 << 4)
+#define LAYER_CLUT_MASK		(0x3 << 8)
+#define LAYER_CLUT_1BPP		(0 << 8)
+#define LAYER_CLUT_2BPP		(1 << 8)
+#define LAYER_CLUT_4BPP		(2 << 8)
+#define LAYER_CLUT_8BPP		(3 << 8)
+
+#define LAYER_POS(x, y)		(((x) & 0x7ff) | (((y) & 0x7ff) << 16))
+#define LAYER_SIZE(x, y)	((((x) - 1) & 0x7ff) | ((((y) - 1) & 0x7ff) << 16))
+#define LAYER_STRIDE(x)		((x) & 0xffffffff)
+#define LAYER_R_G_B(r, g, b)	((((r) & 0xff) << 16) | (((g) & 0xff) << 8) | ((b) & 0xff))
+#define LAYER_RGB(x)		((x) & 0xffffff)
+
+#define LAYER_CRKEY	(0x1 << 0)
+#define LAYER_INV	(0x1 << 1)
+#define LAYER_ITER2BL	(0x1 << 2)
+#define LAYER_ITER	(0x1 << 3)
+#define LAYER_REVALPHA	(0x1 << 4)
+#define LAYER_GAEN	(0x1 << 5)
+#define LAYER_LAEN	(0x1 << 6)
+#define LAYER_OVR	(0x1 << 7)
+#define LAYER_DMA	(0x1 << 8)
+#define LAYER_REP	(0x1 << 9)
+#define LAYER_DSTKEY	(0x1 << 10)
+#define LAYER_DISC	(0x1 << 11)
+#define LAYER_GA(x)	(((x) & 0xff) << 16)
+
+#define LAYER_SCAL		(0x1 << 31)
+#define LAYER_FACTOR(x, y)	((x & 0x3fff) | ((y & 0x3fff) << 16))
+
+#endif	/* #ifndef __AT91_LCDC_H__ */
diff --git a/include/board.h b/include/board.h
index 8df61e77..02541e1c 100644
--- a/include/board.h
+++ b/include/board.h
@@ -58,6 +58,8 @@ extern void at91_mci2_hw_init(void);
 
 extern void at91_sdhc_hw_init(void);
 
+extern void at91_lcdc_hw_init(void);
+
 extern void at91_board_set_dtb_name(char *of_name);
 
 extern void norflash_hw_init(void);
diff --git a/include/common.h b/include/common.h
index 79eb7375..5a9777a8 100644
--- a/include/common.h
+++ b/include/common.h
@@ -53,6 +53,16 @@ struct image_info
 #endif
 	unsigned char *of_dest;
 #endif
+
+#ifdef CONFIG_LOGO
+#if defined(CONFIG_DATAFLASH) || defined(CONFIG_NANDFLASH)
+	unsigned int logo_offset;
+#endif
+#ifdef CONFIG_SDCARD
+	char *logo_filename;
+#endif
+	unsigned char *logo_dest;
+#endif
 };
 
 typedef int (*load_function)(struct image_info *image);
diff --git a/include/lcdc.h b/include/lcdc.h
new file mode 100755
index 00000000..4bc8854a
--- /dev/null
+++ b/include/lcdc.h
@@ -0,0 +1,14 @@
+/*
+ * Copyright (C) 2013 Microchip Technology Inc. and its subsidiaries
+ *
+ * SPDX-License-Identifier: MIT
+ */
+
+#ifndef	__LCDC_H__
+#define	__LCDC_H__
+
+extern void lcdc_init(void);
+extern int lcdc_display(void);
+extern int bmp_size(void *p);
+
+#endif	/* #ifndef __LCDC_H__ */
diff --git a/main.c b/main.c
index 742df8d0..7cfcc324 100644
--- a/main.c
+++ b/main.c
@@ -16,6 +16,7 @@
 #include "autoconf.h"
 #include "optee.h"
 #include "sfr_aicredir.h"
+#include "lcdc.h"
 
 #ifdef CONFIG_CACHES
 #include "l1cache.h"
@@ -42,6 +43,10 @@ int main(void)
 
 	hw_init();
 
+#ifdef CONFIG_LOGO
+	lcdc_init();
+#endif
+
 #ifdef CONFIG_OCMS_STATIC
 	ocms_init_keys();
 	ocms_enable();
diff --git a/toplevel_cpp.mk b/toplevel_cpp.mk
index e2dd4858..f799ba16 100644
--- a/toplevel_cpp.mk
+++ b/toplevel_cpp.mk
@@ -49,3 +49,23 @@ endif
 ifeq ($(CONFIG_CRYSTAL_24_000MHZ),y)
 CPPFLAGS += -DBOARD_MAINOSC=24000000
 endif
+
+ifeq ($(CONFIG_LOGO), y)
+CPPFLAGS += \
+	-DCONFIG_LOGO				\
+	-DLOGO_ADDRESS=$(LOGO_ADDRESS)		\
+	-DLOGO_FB_ADDRESS=$(LOGO_FB_ADDRESS)	\
+	-DLOGO_NAME="\"$(LOGO_NAME)\""		\
+	-DLOGO_RGBDEF=$(LOGO_RGBDEF)		\
+	-DLOGO_SCALE=$(LOGO_SCALE)		\
+	-DLOGO_BL=$(LOGO_BL)			\
+	-DLOGO_BL_DELAY=$(LOGO_BL_DELAY)
+
+ifeq ($(CONFIG_LCDC_IOSET_1), y)
+CPPFLAGS += -DLCDC_IOSET_1
+endif
+
+ifeq ($(CONFIG_LCDC_IOSET_2), y)
+CPPFLAGS += -DLCDC_IOSET_2
+endif
+endif
-- 
2.34.1

